#!/bin/bash

# Run kernel build within a virgin Debian container.

set -o errexit
set -o pipefail
set -o nounset

if [[ $EUID -ne 0 ]]
then
    >&2 echo "Error: This script must be run as root."
    exit 1
fi

if [[ $# -ne 1 ]]
then
    >&2 echo "Error: This script expects one parameters:"
    >&2 echo "       build-kernel-var-som-mx8m-nano KERNEL_BRANCH"
    exit 1
fi

KERNEL_BRANCH="${1}"

SCRIPTDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

cd "${SCRIPTDIR}/../.."

DEBIAN_FRONTEND=noninteractive apt-get update > /dev/null
DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends -y install git ca-certificates build-essential crossbuild-essential-arm64 bc kmod cpio flex cpio libncurses5-dev bison libssl-dev wget lzop rsync fakeroot

mkdir -p "${KERNEL_BRANCH}"
cd "${KERNEL_BRANCH}"

git clone -b "${KERNEL_BRANCH}" --single-branch https://github.com/varigit/linux-imx.git
cd linux-imx

export DTB="freescale/imx8mn-var-som-symphony.dtb
	          freescale/imx8mn-var-som-symphony-root.dtb
	          freescale/imx8mn-var-som-symphony-m7.dtb
	          freescale/imx8mn-var-som-inmate.dtb"
make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- imx8_var_defconfig
make -j 1 KBUILD_IMAGE=arch/arm64/boot/Image ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- ${DTB} deb-pkg

BUILD_OUTPUT="${SCRIPTDIR}/../../build-output"
mkdir -p "${BUILD_OUTPUT}"
find ../ -maxdepth 1 -type f | xargs -I {} cp {} "${BUILD_OUTPUT}"

echo "========"
echo "Success!"
echo "========"
